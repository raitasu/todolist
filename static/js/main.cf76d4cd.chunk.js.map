{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","Components/AddItemForm.tsx","Components/EditableSpan.tsx","Task.tsx","Todolist.tsx","State/todolists-reducer.ts","State/tasks-reducer.ts","AppWithRedux.tsx","State/store.ts","index.tsx","Todolist.module.css","Task.module.css"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","onClickAddTask","trim","callback","TextField","variant","value","onChange","event","currentTarget","onKeyPress","key","size","label","helperText","IconButton","color","style","maxWidth","maxHeight","minWidth","minHeight","onClick","AddBox","EditableSpan","editMode","setEditMode","e","type","onBlur","autoFocus","onDoubleClick","axios","create","baseURL","withCredentials","headers","Task","onChangeTaskTitle","useCallback","newTitle","changeTitleTask","todolistId","task","id","onChangeHandler","onChangeStatusHandler","checked","Completed","New","onClickHandler","removeTask","className","classes","Checkbox","status","Delete","Todolist","newId","changeStatus","onChangeTodolistTitleHandler","onChangeTodolistTitle","tasksForTodolist","tasks","filter","el","changeFilter","addTask","todolistTitle","removeTodolist","map","Button","initialState","AppWithRedux","todolists","useSelector","state","dispatch","useDispatch","action","filterValue","payload","changeTodolistFilterAC","removeTodolistAC","addTodolist","newTodolistTitle","v1","changeTodolistTitle","changeTodolistTitleAC","changeTaskStatus","taskId","changeTaskStatusAC","removeTasksAC","newTaskTitle","addTaskAC","changeTaskTitleAC","AppBar","position","backgroundColor","Toolbar","edge","aria-label","sx","mr","Menu","Typography","component","flexGrow","Container","fixed","Grid","container","padding","spacing","todolist","item","Paper","elevation","rootReducer","combineReducers","td","addedDate","order","t","newTask","description","todoListId","priority","Hi","startDate","deadline","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message","module","exports"],"mappings":"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","file":"static/js/main.cf76d4cd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from \"axios\";\n\nexport type TodolistType = {\n    id: string;\n    addedDate: string;\n    order: number;\n    title: string;\n};\n\ntype ResponseType<D = {}> = {\n    data: D;\n    messages: Array<String>;\n    fieldsErrors: Array<string>;\n    resultCode: number;\n};\n\nexport type TaskType = {\n    id: string;\n    title: string;\n    description: string;\n    todoListId: string;\n    order: number;\n    status: TaskStatuses;\n    priority: TaskPriorities;\n    startDate: string;\n    deadline: string;\n    addedDate: string;\n};\ntype GetResponseTaskType = {\n    items: Array<TaskType>;\n    totalCount: number;\n    error: string;\n};\n\nexport enum TaskStatuses {\n    New,\n    inProgress,\n    Completed,\n    Draft,\n}\nexport enum TaskPriorities {\n    Low,\n    Middle,\n    Hi,\n    Urgently,\n    Later\n}\n\n\nconst instance = axios.create({\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\n    withCredentials: true,\n    headers: {\n        \"API-KEY\": \"abaf6d7d-3636-4277-82e8-cbf95a909917\",\n    },\n});\n\nexport const todolistAPI = {\n    getTodolists() {\n        return instance.get<Array<TodolistType>>(`/todo-lists/`);\n    },\n    createTodolists(title: string) {\n        return instance.post<any, ResponseType<{ item: TodolistType }>, { title: string }>(\n            \"/todo-lists\",\n            { title },\n        );\n    },\n    deleteTodolists(todolistId: string) {\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}`);\n    },\n    updateTodolists(todolistId: string, title: string) {\n        return instance.put<any, ResponseType, { title: string }>(`/todo-lists/${todolistId}`, {\n            title,\n        });\n    },\n\n    getTasks(todolistId: string) {\n        return instance.get<GetResponseTaskType>(`/todo-lists/${todolistId}/tasks`);\n    },\n    createTask(todolistId: string, title: string) {\n        return instance.post<ResponseType<{ item: TaskType }>>(`/todo-lists/${todolistId}/tasks`, {\n            title,\n        });\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`);\n    },\n    updateTitleTask(todolistId: string, taskId: string, obj: { title: string }) {\n        return instance.put<ResponseType<{ item: TaskType }>>(\n            `/todo-lists/${todolistId}/tasks/${taskId}`,\n            obj,\n        );\n    },\n};\n","import React, { ChangeEvent, KeyboardEvent, useState } from \"react\";\nimport { IconButton, TextField } from \"@mui/material\";\nimport { AddBox } from \"@mui/icons-material\";\n\nexport type AddItemFormType = {\n    callback: (title: string) => void;\n};\n\nconst AddItemForm = React.memo((props: AddItemFormType) => {\n    let [title, setTitle] = useState(\"\");\n    let [error, setError] = useState<string | null>(null);\n    const onChangeTitle = (event: ChangeEvent<HTMLInputElement>) => {\n        if (error !== null) {\n            setError(null);\n        }\n\n        setTitle(event.currentTarget.value);\n    };\n\n    const onClickAddTask = () => {\n        if (title.trim() !== \"\") {\n            props.callback(title.trim());\n            setTitle(\"\");\n        } else {\n            setError(\"Title is required!\");\n        }\n    };\n\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === \"Enter\") {\n            onClickAddTask();\n        }\n    };\n    return (\n        <div>\n            <TextField\n                variant={\"outlined\"}\n                error={!!error}\n                value={title}\n                onChange={onChangeTitle}\n                onKeyPress={onKeyPressHandler}\n                size={\"small\"}\n                label={\"Title\"}\n                helperText={error}\n            />\n\n            <IconButton\n                color={\"primary\"}\n                style={{\n                    maxWidth: \"40px\",\n                    maxHeight: \"40px\",\n                    minWidth: \"40px\",\n                    minHeight: \"40px\",\n                    color: \"DimGrey\",\n                }}\n                onClick={onClickAddTask}\n            >\n                <AddBox />\n            </IconButton>\n        </div>\n    );\n});\n\nexport default AddItemForm;\n","import React, { ChangeEvent, memo, useState } from \"react\";\nimport { TextField } from \"@mui/material\";\n\ntype EditableSpanType = {\n    title: string;\n    onChange: (newTitle: string) => void;\n};\n\nconst EditableSpan = memo((props: EditableSpanType) => {\n    const [editMode, setEditMode] = useState(false);\n    const [title, setTitle] = useState(props.title);\n\n    const editModeHandler = () => {\n        setEditMode(true);\n    };\n    const activateViewHandler = () => {\n        setEditMode(false);\n        props.onChange(title);\n    };\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value);\n    };\n\n    return editMode ? (\n        <TextField\n            variant={\"outlined\"}\n            value={title}\n            onChange={onChangeHandler}\n            type=\"text\"\n            onBlur={activateViewHandler}\n            autoFocus\n            size={\"small\"}\n        />\n    ) : (\n        <span onDoubleClick={editModeHandler}>{props.title}</span>\n    );\n});\n\nexport default EditableSpan;\n","import React, { ChangeEvent, memo, useCallback } from \"react\";\nimport { Checkbox, IconButton } from \"@mui/material\";\nimport { Delete } from \"@mui/icons-material\";\nimport EditableSpan from \"./Components/EditableSpan\";\nimport classes from \"./Task.module.css\";\nimport { TaskStatuses, TaskType } from \"./api/todolist-api\";\n\ntype TaskPropsType = {\n    todolistId: string;\n    task: TaskType;\n    changeTitleTask: (todolistId: string, taskId: string, newTitle: string) => void;\n    onChangeStatusHandler: (todolistId: string, taskId: string, status: TaskStatuses) => void;\n    removeTask: (todolistId: string, taskId: string) => void;\n};\nexport const Task = memo((props: TaskPropsType) => {\n    const onChangeTaskTitle = useCallback(\n        (newTitle: string) => {\n            props.changeTitleTask(props.todolistId, props.task.id, newTitle);\n        },\n        [props.changeTitleTask, props.todolistId, props.task.id],\n    );\n    const onChangeHandler = useCallback(\n        (event: ChangeEvent<HTMLInputElement>) =>\n            props.onChangeStatusHandler(\n                props.todolistId,\n                props.task.id,\n                event.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New,\n            ),\n        [props.onChangeStatusHandler, props.todolistId, props.task.id],\n    );\n    const onClickHandler = useCallback(() => {\n        props.removeTask(props.todolistId, props.task.id);\n    }, [props.removeTask, props.todolistId, props.task.id]);\n\n    return (\n        <div className={classes.task} key={props.task.id}>\n            <Checkbox color={\"primary\"} checked={props.task.status === TaskStatuses.Completed} onChange={onChangeHandler} />\n\n            <EditableSpan title={props.task.title} onChange={onChangeTaskTitle} />\n\n            <IconButton onClick={onClickHandler}>\n                <Delete />\n            </IconButton>\n        </div>\n    );\n});\n","import React, { memo, useCallback } from \"react\";\nimport \"./App.css\";\nimport classes from \"./Todolist.module.css\";\nimport AddItemForm from \"./Components/AddItemForm\";\nimport EditableSpan from \"./Components/EditableSpan\";\nimport { Button, IconButton } from \"@mui/material\";\nimport { Task } from \"./Task\";\nimport ClearIcon from \"@mui/icons-material/Clear\";\nimport { TaskStatuses, TaskType } from \"./api/todolist-api\";\nimport { FilterButtonType } from \"./State/todolists-reducer\";\n\ntype PropsType = {\n    id: string;\n    title: string;\n    tasks: Array<TaskType>;\n    removeTask: (todolistId: string, id: string) => void;\n    changeFilter: (value: FilterButtonType, todolistId: string) => void;\n    addTask: (todolistId: string, newTitle: string) => void;\n    changeStatus: (todolistId: string, id: string, status: TaskStatuses) => void;\n    filter: string;\n    removeTodolist: (todolistid: string) => void;\n    changeTitleTask: (todolistId: string, id: string, newTitle: string) => void;\n    onChangeTodolistTitle: (todolistId: string, newTitle: string) => void;\n};\n\nconst Todolist = memo((props: PropsType) => {\n    const onChangeStatusHandler = useCallback(\n        (todolistId: string, newId: string, status: TaskStatuses) => {\n            props.changeStatus(todolistId, newId, status);\n        },\n        [props.changeStatus, props],\n    );\n    const onChangeTodolistTitleHandler = useCallback(\n        (newTitle: string) => {\n            props.onChangeTodolistTitle(props.id, newTitle);\n        },\n        [props.onChangeTodolistTitle, props.id],\n    );\n\n    let tasksForTodolist = props.tasks;\n\n    if (props.filter === \"active\") {\n        tasksForTodolist = tasksForTodolist.filter((el) => el.status === TaskStatuses.New);\n    }\n    if (props.filter === \"completed\") {\n        tasksForTodolist = tasksForTodolist.filter((el) => el.status === TaskStatuses.Completed);\n    }\n\n    const onClickHandler = useCallback(\n        (value: FilterButtonType) => {\n            props.changeFilter(value, props.id);\n        },\n        [props.changeFilter, props.id],\n    );\n    const addTask = useCallback(\n        (title: string) => {\n            props.addTask(props.id, title);\n        },\n        [props.addTask, props.id],\n    );\n\n    return (\n        <div>\n            <div className={classes.todolistTitle}>\n                <h1>\n                    <EditableSpan title={props.title} onChange={onChangeTodolistTitleHandler} />\n                </h1>\n\n                <div>\n                    <IconButton\n                        onClick={() => {\n                            props.removeTodolist(props.id);\n                        }}\n                    >\n                        <ClearIcon />\n                    </IconButton>\n                </div>\n            </div>\n\n            <AddItemForm callback={addTask} />\n            <div>\n                <div>\n                    {tasksForTodolist.map((task) => (\n                        <Task\n                            key={task.id}\n                            todolistId={props.id}\n                            task={task}\n                            changeTitleTask={props.changeTitleTask}\n                            onChangeStatusHandler={onChangeStatusHandler}\n                            removeTask={props.removeTask}\n                        />\n                    ))}\n                </div>\n            </div>\n            <div>\n                <Button\n                    style={{ color: \"DimGrey\" }}\n                    variant={props.filter === \"all\" ? \"outlined\" : \"text\"}\n                    color={\"primary\"}\n                    onClick={() => {\n                        onClickHandler(\"all\");\n                    }}\n                >\n                    All\n                </Button>\n                <Button\n                    style={{ color: \"DimGrey\" }}\n                    variant={props.filter === \"active\" ? \"outlined\" : \"text\"}\n                    color={\"primary\"}\n                    onClick={() => {\n                        onClickHandler(\"active\");\n                    }}\n                >\n                    Active\n                </Button>\n                <Button\n                    style={{ color: \"DimGrey\" }}\n                    variant={props.filter === \"completed\" ? \"outlined\" : \"text\"}\n                    color={\"primary\"}\n                    onClick={() => {\n                        onClickHandler(\"completed\");\n                    }}\n                >\n                    Completed\n                </Button>\n            </div>\n        </div>\n    );\n});\nexport default Todolist;\n","import { v1 } from \"uuid\";\nimport { TodolistType } from \"../api/todolist-api\";\n\nexport type ActionType =\n    | RemoveTodolistType\n    | AddTodolistType\n    | ChangeTodolistTitleType\n    | ChangeTodolistFilterType;\nexport type RemoveTodolistType = ReturnType<typeof removeTodolistAC>;\nexport type AddTodolistType = ReturnType<typeof addTodolistAC>;\nexport type ChangeTodolistTitleType = ReturnType<typeof changeTodolistTitleAC>;\nexport type ChangeTodolistFilterType = ReturnType<typeof changeTodolistFilterAC>;\n\nconst initialState: Array<TodolistDomainType> = [];\n\nexport type TodolistDomainType = TodolistType & {\n    filter: FilterButtonType;\n};\nexport type FilterButtonType = \"all\" | \"active\" | \"completed\";\n\nexport const todolistsReducer = (\n    state = initialState,\n    action: ActionType,\n): Array<TodolistDomainType> => {\n    switch (action.type) {\n        case \"REMOVE-TODOLIST\":\n            return state.filter((td) => td.id !== action.payload.todolistId);\n        case \"ADD-TODOLIST\":\n            return [\n                ...state,\n                {\n                    id: action.payload.todolistId,\n                    title: action.payload.newTodolistTitle,\n                    filter: \"all\",\n                    addedDate: \"\",\n                    order: 0,\n                },\n            ];\n        case \"CHANGE-TODOLIST-TITLE\":\n            return state.map((td) =>\n                td.id === action.payload.todolistId\n                    ? {\n                          ...td,\n                          title: action.payload.newTodolistTitle,\n                      }\n                    : td,\n            );\n        case \"CHANGE-TODOLIST-FILTER\":\n            return state.map((td) =>\n                td.id === action.payload.todolistId\n                    ? {\n                          ...td,\n                          filter: action.payload.filterValue,\n                      }\n                    : td,\n            );\n        default:\n            return state;\n    }\n};\n\nexport const removeTodolistAC = (todolistId: string) => {\n    return {\n        type: \"REMOVE-TODOLIST\",\n        payload: {\n            todolistId,\n        },\n    } as const;\n};\nexport const addTodolistAC = (newTodolistTitle: string) => {\n    return {\n        type: \"ADD-TODOLIST\",\n        payload: {\n            newTodolistTitle,\n            todolistId  : v1(),\n        },\n    } as const;\n};\nexport const changeTodolistTitleAC = (todolistId: string, newTodolistTitle: string) => {\n    return {\n        type: \"CHANGE-TODOLIST-TITLE\",\n        payload: {\n            todolistId,\n            newTodolistTitle,\n        },\n    } as const;\n};\nexport const changeTodolistFilterAC = (todolistId: string, filterValue: FilterButtonType) => {\n    return {\n        type: \"CHANGE-TODOLIST-FILTER\",\n        payload: {\n            todolistId,\n            filterValue,\n        },\n    } as const;\n};\n","import { v1 } from \"uuid\";\nimport { TasksStateType } from \"../AppWithRedux\";\nimport { AddTodolistType } from \"./todolists-reducer\";\nimport { TaskPriorities, TaskStatuses, TaskType } from \"../api/todolist-api\";\n\nexport type ActionType =\n    | RemoveTasksType\n    | AddTasksType\n    | ChangeTaskStatusType\n    | ChangeTaskTitleType\n    | AddTodolistType;\nexport type RemoveTasksType = ReturnType<typeof removeTasksAC>;\nexport type AddTasksType = ReturnType<typeof addTaskAC>;\nexport type ChangeTaskStatusType = ReturnType<typeof changeTaskStatusAC>;\nexport type ChangeTaskTitleType = ReturnType<typeof changeTaskTitleAC>;\n\nconst initialState: TasksStateType = {};\n\nexport const tasksReducer = (state = initialState, action: ActionType) => {\n    switch (action.type) {\n        case \"REMOVE-TASKS\":\n            return {\n                ...state,\n                [action.todolistId]: state[action.todolistId].filter((t) => t.id !== action.taskId),\n            };\n        case \"ADD-TASK\":\n            let newTask: TaskType = {\n                id: v1(),\n                title: action.newTaskTitle,\n                status: TaskStatuses.New,\n                description: \"\",\n                todoListId: action.todolistId,\n                order: 0,\n                priority: TaskPriorities.Hi,\n                startDate: \"\",\n                deadline: \"\",\n                addedDate: \"\",\n            };\n            return { ...state, [action.todolistId]: [newTask, ...state[action.todolistId]] };\n        case \"CHANGE-TASK-STATUS\":\n            return {\n                ...state,\n                [action.todolistId]: state[action.todolistId].map((t) =>\n                    t.id === action.taskId\n                        ? {\n                              ...t,\n                              status: action.status,\n                          }\n                        : t,\n                ),\n            };\n        case \"CHANGE-TASK-TITLE\":\n            return {\n                ...state,\n                [action.todolistId]: state[action.todolistId].map((t) =>\n                    t.id === action.taskId\n                        ? {\n                              ...t,\n                              title: action.newTaskTitle,\n                          }\n                        : t,\n                ),\n            };\n        case \"ADD-TODOLIST\":\n            return { ...state, [action.payload.todolistId]: [] };\n        default:\n            return state;\n    }\n};\n\nexport const removeTasksAC = (taskId: string, todolistId: string) => {\n    return {\n        type: \"REMOVE-TASKS\",\n        todolistId: todolistId,\n        taskId: taskId,\n    } as const;\n};\nexport const addTaskAC = (newTaskTitle: string, todolistId: string) => {\n    return {\n        type: \"ADD-TASK\",\n        newTaskTitle: newTaskTitle,\n        todolistId: todolistId,\n    } as const;\n};\nexport const changeTaskTitleAC = (taskId: string, newTaskTitle: string, todolistId: string) => {\n    return {\n        type: \"CHANGE-TASK-TITLE\",\n        taskId,\n        todolistId,\n        newTaskTitle,\n    } as const;\n};\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string) => {\n    return {\n        type: \"CHANGE-TASK-STATUS\",\n        taskId: taskId,\n        status: status,\n        todolistId: todolistId,\n    } as const;\n};\n","import React, { useCallback } from \"react\";\nimport \"./App.css\";\nimport Todolist from \"./Todolist\";\nimport AddItemForm from \"./Components/AddItemForm\";\nimport {\n    AppBar,\n    Button,\n    Container,\n    Grid,\n    IconButton,\n    Paper,\n    Toolbar,\n    Typography,\n} from \"@mui/material\";\nimport { Menu } from \"@mui/icons-material\";\nimport {\n  addTodolistAC,\n  changeTodolistFilterAC,\n  changeTodolistTitleAC, FilterButtonType,\n  removeTodolistAC, TodolistDomainType\n} from \"./State/todolists-reducer\";\nimport {\n    addTaskAC,\n    changeTaskStatusAC,\n    changeTaskTitleAC,\n    removeTasksAC,\n} from \"./State/tasks-reducer\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppStateType } from \"./State/store\";\nimport { TaskStatuses, TaskType } from \"./api/todolist-api\";\n\n\n\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>;\n};\n\n\nfunction AppWithRedux() {\n    const todolists = useSelector<AppStateType, Array<TodolistDomainType>>((state) => state.todolists);\n    const dispatch = useDispatch();\n\n    const changeFilter = useCallback(\n        (value: FilterButtonType, todolistId: string) => {\n            let action = changeTodolistFilterAC(todolistId, value);\n            dispatch(action);\n        },\n        [dispatch],\n    );\n    const removeTodolist = useCallback(\n        (todolistId: string) => {\n            let action = removeTodolistAC(todolistId);\n            dispatch(action);\n        },\n        [dispatch],\n    );\n    const addTodolist = useCallback(\n        (title: string) => {\n            let action = addTodolistAC(title);\n            dispatch(action);\n        },\n        [dispatch],\n    );\n    const changeTodolistTitle = useCallback(\n        (todolistId: string, newTitle: string) => {\n            let action = changeTodolistTitleAC(todolistId, newTitle);\n            dispatch(action);\n        },\n        [dispatch],\n    );\n\n    const tasks = useSelector<AppStateType, TasksStateType>((state) => state.tasks);\n\n    const changeTaskStatus = useCallback(\n        (todolistId: string, taskId: string, status: TaskStatuses) => {\n            let action = changeTaskStatusAC(taskId, status, todolistId);\n            dispatch(action);\n        },\n        [dispatch],\n    );\n    const removeTask = useCallback(\n        (todolistId: string, taskId: string) => {\n            let action = removeTasksAC(taskId, todolistId);\n            dispatch(action);\n        },\n        [dispatch],\n    );\n    const addTask = useCallback(\n        (todolistId: string, newTitle: string) => {\n            let action = addTaskAC(newTitle, todolistId);\n            dispatch(action);\n        },\n        [dispatch],\n    );\n    const changeTitleTask = useCallback(\n        (todolistId: string, taskId: string, newTitle: string) => {\n            let action = changeTaskTitleAC(taskId, newTitle, todolistId);\n            dispatch(action);\n        },\n        [dispatch],\n    );\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\" color={\"primary\"} style={{ backgroundColor: \"DimGrey\" }}>\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" sx={{ mr: 2 }}>\n                        <Menu />\n                    </IconButton>\n                    <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n                        Todolist\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n\n            <Container fixed>\n                <Grid container style={{ padding: \"20px\" }}>\n                    <AddItemForm callback={addTodolist} />\n                </Grid>\n                <Grid container spacing={3}>\n                    {todolists.map((todolist) => {\n                        return (\n                            <Grid item>\n                                <Paper elevation={3} style={{ padding: \"10px\" }}>\n                                    <Todolist\n                                        key={todolist.id}\n                                        id={todolist.id}\n                                        title={todolist.title}\n                                        tasks={tasks[todolist.id]}\n                                        removeTask={removeTask}\n                                        changeFilter={changeFilter}\n                                        addTask={addTask}\n                                        changeStatus={changeTaskStatus}\n                                        filter={todolist.filter}\n                                        removeTodolist={removeTodolist}\n                                        changeTitleTask={changeTitleTask}\n                                        onChangeTodolistTitle={changeTodolistTitle}\n                                    />\n                                </Paper>\n                            </Grid>\n                        );\n                    })}\n                </Grid>\n            </Container>\n        </div>\n    );\n}\n\nexport default AppWithRedux;\n","import { combineReducers, createStore } from \"redux\";\nimport { todolistsReducer } from \"./todolists-reducer\";\nimport { tasksReducer } from \"./tasks-reducer\";\n\nconst rootReducer = combineReducers({\n    todolists: todolistsReducer,\n    tasks: tasksReducer,\n});\n\nexport const store = createStore(rootReducer);\n\nexport type AppStateType = ReturnType<typeof rootReducer>;\n\n// @ts-ignore\nwindow.store = store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport AppWithRedux from \"./AppWithRedux\";\nimport { Provider } from \"react-redux\";\nimport {store} from \"./State/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <AppWithRedux />\n    </Provider>,\n    document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Todolist_error__1eftn\",\"errorMessage\":\"Todolist_errorMessage__1JMW2\",\"todolistTitle\":\"Todolist_todolistTitle__2VGFE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"Task_task__2GZbn\"};"],"sourceRoot":""}